@page "/people"
@inject IPersonRepository personRepo
@attribute [Authorize]

<h3>Index People</h3>

<div class="form-group">
    @try
    {

        <a class="btn btn-info" href="/people/create">New Person</a>
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
</div>

<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages" SelectedPage="SelectedPage" />

@try
{
    <GenericList List="People">
        <WholeListTemplate>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Name</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in People)
                    {
                        <tr>
                            <td>
                                <a class="btn btn-success" href="/people/edit/@item.Id">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => DeletePerson(item.Id))">Delete</button>
                            </td>
                            <td>@item.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        </WholeListTemplate>
    </GenericList>
}
catch (Exception ex)
{
    Console.WriteLine(ex.Message);
}

@code {
    List<Person> People;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1 };
    private int totalAmountPages;





    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadPeople();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task LoadPeople()
    {
        var paginatedResponse = await personRepo.GetPeople(paginationDTO);
        People = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadPeople();
    }


    private async Task DeletePerson(int Id)
    {
        await personRepo.DeletePerson(Id);
        await LoadPeople();
    }
}
